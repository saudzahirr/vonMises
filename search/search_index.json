{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"vonMises","text":"<p>The vonMises solves the eigenvalue problem using a combination of the Power Iteration  method and Rayleigh Quotient to compute both the dominant eigenvalue and its associated eigenvector.  The algorithm uses deflation to remove previously computed eigenvalues from the matrix.</p>"},{"location":"#power-iteration-method","title":"Power Iteration Method","text":"<p>The Power Iteration method is used to compute the largest eigenvalue of a matrix  A  and its corresponding  eigenvector. The steps are as follows:</p> <ol> <li>Initialize with a random vector  x_0 .</li> <li>Normalize  x_0  to have a unit norm.</li> <li>Iteratively compute  x_{k+1} = A x_k  and normalize the resulting vector.</li> </ol> <p>The process converges when  x_k  stabilizes. The largest eigenvalue  \\lambda  is computed by:</p>  \\lambda = \\frac{x_k^T A x_k}{x_k^T x_k}"},{"location":"#rayleigh-quotient","title":"Rayleigh Quotient","text":"<p>The Rayleigh Quotient is defined as:</p>  R(x) = \\frac{x^T A x}{x^T x}  <p>This method refines the computed eigenvalue after performing the Power Iteration.</p>"},{"location":"#complete-algorithm","title":"Complete Algorithm","text":"<p>The vonMises algorithm combines Power Iteration with Rayleigh Quotient and deflation:</p> <pre><code>vonMises(A):\n    for a in range(n):\n        x = power_iteration(A)\n        \u03bb = rayleigh_quotient(A, x)\n        A = A - \u03bb * (x @ x.T)\n</code></pre> <p>The algorithm repeats until all eigenvalues and eigenvectors are computed.</p>"},{"location":"#deflation","title":"Deflation","text":"<p>After finding each eigenvalue and eigenvector pair  (\\lambda, x) , the matrix  A  is deflated by subtracting the rank-1 update:</p>  A = A - \\lambda \\cdot (x \\cdot x^T)  <p>This ensures that subsequent iterations of the algorithm find the next largest eigenvalue of the matrix.</p>"}]}